// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Notify {
  id          String     @id @default(uuid())
  name        String
  description String?
  body        String
  icon        String?
  provider    String
  createdById String?
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?
  Workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId String?

  @@index([createdById], name: "createdById_idx")
  @@index([name], name: "name_idx")
}

// Quero qeu o Webhook tenha um relacionamento com varios workspaces

model Workspace {
  id        String    @id @default(uuid())
  name      String
  slug      String
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?
  notifyers Notify[]
  webhooks  Webhook[]
}

model Webhook {
  id         String      @id @default(uuid())
  name       String
  url        String
  workspaces Workspace[]
  User       User?       @relation(fields: [userId], references: [id])
  userId     String?
}

model User {
  id            String      @id @default(cuid())
  sub           String?     @unique @default(uuid())
  name          String?
  email         String      @unique
  emailVerified DateTime    @updatedAt
  image         String?
  accounts      Account[]
  Session       Session[]
  workspaces    Workspace[]
  webhooks      Webhook[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@id([provider, providerAccountId])
  @@index([userId], name: "account_userId_idx")
}

model Session {
  sessionToken String   @id @default(uuid())
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId], name: "session_userId_idx")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Errors {
  id          String  @id @unique @default(uuid())
  code        String
  message     String
  description String?
}
